1] SELECT * FROM CITY WHERE Population > 100000 AND CountryCode = 'USA';

2] SELECT NAME FROM CITY WHERE CountryCode = 'USA' AND Population > 120000;

3] SELECT * FROM CITY;

4] SELECT * FROM CITY WHERE ID = 1661;

5] SELECT * FROM CITY WHERE CountryCode = 'JPN';

6] SELECT NAME FROM CITY WHERE CountryCode = 'JPN';

7] SELECT City, State FROM STATION;

8] SELECT DISTINCT City FROM STATION WHERE MOD(ID, 2) = 0;

9] SELECT COUNT(*) - COUNT(DISTINCT City) AS CityCountDifference FROM STATION;

10] SELECT City, LENGTH(City) AS CityLength FROM STATION ORDER BY CityLength ASC, City LIMIT 1;
    SELECT City, LENGTH(City) AS CityLength FROM STATION ORDER BY CityLength DESC, City LIMIT 1;
    
11] SELECT DISTINCT City FROM STATION WHERE LOWER(SUBSTRING(City FROM 1 FOR 1)) IN ('a', 'e', 'i', 'o', 'u');

12] SELECT DISTINCT City FROM STATION WHERE LOWER(SUBSTRING(City FROM LENGTH(City) FOR 1)) IN ('a', 'e', 'i', 'o', 'u');

13] SELECT DISTINCT City FROM STATION WHERE LOWER(SUBSTRING(City FROM 1 FOR 1)) NOT IN ('a', 'e', 'i', 'o', 'u');

14] SELECT DISTINCT City FROM STATION WHERE LOWER(SUBSTRING(City FROM LENGTH(City) FOR 1)) NOT IN ('a', 'e', 'i', 'o', 'u');

15] SELECT DISTINCT City FROM STATION WHERE LOWER(SUBSTRING(City FROM 1 FOR 1)) NOT IN ('a', 'e', 'i', 'o', 'u')
    OR LOWER(SUBSTRING(City FROM LENGTH(City) FOR 1)) NOT IN ('a', 'e', 'i', 'o', 'u');
    
16] SELECT DISTINCT City FROM STATION WHERE LOWER(SUBSTRING(City FROM 1 FOR 1)) NOT IN ('a', 'e', 'i', 'o', 'u')
   AND LOWER(SUBSTRING(City FROM LENGTH(City) FOR 1)) NOT IN ('a', 'e', 'i', 'o', 'u');

17] SELECT DISTINCT P.product_id, P.product_name, P.unit_price FROM Product P JOIN Sales S ON P.product_id = S.product_id
    WHERE S.sale_date BETWEEN '2019-01-01' AND '2019-03-31' AND P.product_id NOT IN (
    SELECT DISTINCT P2.product_id FROM Product P2 JOIN Sales S2 ON P2.product_id = S2.product_id
    WHERE S2.sale_date NOT BETWEEN '2019-01-01' AND '2019-03-31');
    
18] SELECT DISTINCT author_id FROM Views WHERE author_id = viewer_id ORDER BY author_id;

19] SELECT ROUND(SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END) * 100 / COUNT(*), 2) AS immediate_percentage
    FROM Delivery;

20] SELECT ad_id,ROUND(SUM(CASE WHEN action = 'Clicked' THEN 1 ELSE 0 END) / COUNT(*) * 100, 2) AS ctr FROM Ads GROUP BY ad_id 
    ORDER BY ctr DESC, ad_id;
    
21] SELECT e.employee_id,e.team_id,COUNT(*) AS team_size FROM Employee e GROUP BY e.employee_id, e.team_id;

22] SELECT c.country_id,c.country_name,CASE WHEN AVG(w.weather_state) <= 15 THEN 'Cold' WHEN AVG(w.weather_state) >= 25 THEN 'Hot'
    ELSE 'Warm' END AS weather_type FROM Countries c JOIN Weather w ON c.country_id = w.country_id WHERE EXTRACT(MONTH FROM w.day) = 11 
    AND EXTRACT(YEAR FROM w.day) = 2019 GROUP BY c.country_id, c.country_name;
    
23] SELECT us.product_id,ROUND(SUM(p.price * us.units) / SUM(us.units), 2) AS average_price FROM UnitsSold us JOIN Prices p ON 
    us.product_id = p.product_id AND us.purchase_date BETWEEN p.start_date AND p.end_date GROUP BY us.product_id;
    
24] SELECT player_id,MIN(event_date) AS first_login_date FROM Activity GROUP BY player_id;

25] WITH FirstLoginCTE AS (SELECT player_id,device_id,event_date,ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY event_date) AS row_num
    FROM Activity) SELECT player_id,device_id AS first_logged_in_device FROM FirstLoginCTE WHERE row_num = 1;

26] WITH FebruaryOrders AS ( SELECT p.product_name,SUM(o.unit) AS total_units FROM Products p JOIN Orders o ON p.product_id = o.product_id
    WHERE o.order_date BETWEEN '2020-02-01' AND '2020-02-29' GROUP BY p.product_id, p.product_name)
    SELECT product_name,total_units AS amount FROM FebruaryOrders WHERE total_units >= 100;
 
27] SELECT user_id,name,mail FROM Users WHERE mail REGEXP '^[A-Za-z][A-Za-z0-9_.-]*@leetcode.com$';

28] WITH MonthlySpending AS (SELECT c.customer_id,c.name AS customer_name,DATE_FORMAT(o.order_date, '%Y-%m') AS month,
    SUM(p.price * o.quantity) AS total_spending FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id
    JOIN Product p ON o.product_id = p.product_id WHERE o.order_date BETWEEN '2020-06-01' AND '2020-07-31'
    GROUP BY c.customer_id, month)
    SELECT customer_id,customer_name FROM MonthlySpending WHERE total_spending >= 100 GROUP BY customer_id HAVING COUNT(DISTINCT month) = 2;
 
29] SELECT DISTINCT c.title FROM TVProgram t JOIN Content c ON t.content_id = c.content_id WHERE c.Kids_content = 'Y'
    AND t.program_date BETWEEN '2020-06-01' AND '2020-06-30' AND c.content_type = 'movie';
  
30] SELECT q.id, q.year, n.npv FROM Queries q LEFT JOIN NPV n ON q.id = n.id AND q.year = n.year;

31] SELECT e.id, e.name, eu.unique_id FROM Employees e LEFT JOIN EmployeeUNI eu ON e.id = eu.id;

32] SELECT id, name, unique_id FROM Employees LEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id;
   
33] SELECT u.id,u.name,COALESCE(SUM(r.distance), 0) AS travelled_distance FROM Users u LEFT JOIN Rides r ON u.id = r.user_id
    GROUP BY u.id, u.name ORDER BY travelled_distance DESC, u.name ASC;
    
34] SELECT P.product_name,SUM(O.unit) AS total_units,SUM(O.unit * P.unit_price) AS total_amount FROM Products P 
    JOIN Orders O ON P.product_id = O.product_id WHERE O.order_date >= '2020-02-01' AND O.order_date < '2020-03-01'
    GROUP BY P.product_id, P.product_name HAVING SUM(O.unit) >= 100;

35] SELECT user_name FROM ( SELECT user_id, COUNT(DISTINCT movie_id) AS num_rated_movies,RANK() OVER (
    ORDER BY COUNT(DISTINCT movie_id) DESC, user_id) AS rnk FROM MovieRating GROUP BY user_id) ranked_users JOIN Users 
    ON ranked_users.user_id = Users.user_id WHERE rnk = 1 ORDER BY user_name;
   
36] SELECT U.id AS user_id, U.name, COALESCE(SUM(R.distance), 0) AS travelled_distance FROM Users ULEFT JOIN Rides R ON U.id = R.user_id
    GROUP BY U.id, U.name ORDER BY travelled_distance DESC, U.name ASC;
    
37] SELECT E.id, E.name, EU.unique_id FROM Employees E LEFT JOIN EmployeeUNI EU ON E.id = EU.id;

38] SELECT S.id, S.name FROM Students S LEFT JOIN Departments D ON S.department_id = D.id WHERE D.id IS NULL;

39] SELECT LEAST(from_id, to_id) as person1,GREATEST(from_id, to_id) as person2,COUNT(*) as call_count,SUM(duration) as 
    total_duration FROM Calls GROUP BY person1, person2;
    
40] SELECT u.product_id,ROUND(SUM(p.price * u.units) / SUM(u.units), 2) AS average_price FROM UnitsSold u JOIN Prices p ON 
    u.product_id = p.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date GROUP BY u.product_id;

41] SELECT w.name AS warehouse_name,SUM(p.Width * p.Length * p.Height * w.units) AS total_volume FROM Warehouse w
    JOIN Products p ON w.product_id = p.product_id GROUP BY w.name;
    
42] SELECT sale_date,SUM(CASE WHEN fruit = 'apples' THEN sold_num ELSE 0 END) - SUM(CASE WHEN fruit = 'oranges' THEN sold_num ELSE 0 END) 
    AS diff FROM Sales GROUP BY sale_date ORDER BY sale_date;
 
43] WITH PlayerLogins AS ( SELECT player_id,MIN(event_date) AS first_login_date FROM Activity GROUP BY player_id )
    SELECT ROUND( SUM(CASE WHEN EXISTS (SELECT 1 FROM Activity a2 WHERE a1.player_id = a2.player_id AND 
    a2.event_date = DATE_ADD(a1.first_login_date, INTERVAL 1 DAY)) THEN 1 ELSE 0 END) / COUNT(DISTINCT a1.player_id),2) 
    AS fraction_of_players FROM PlayerLogins a1;
    
44] SELECT managerId AS employee_id, COUNT(id) AS report_count FROM Employee WHERE managerId IS NOT NULL GROUP BY managerId
    HAVING COUNT(id) >= 5;
    
45] SELECT d.dept_name, COUNT(s.student_id) AS student_number FROM Department d LEFT JOIN Student s ON d.dept_id = s.dept_id
    GROUP BY d.dept_id, d.dept_name ORDER BY student_number DESC, d.dept_name;

46] SELECT DISTINCT c.customer_id FROM Customer c LEFT JOIN Product p ON c.product_key = p.product_key GROUP BY c.customer_id
    HAVING COUNT(DISTINCT p.product_key) = (SELECT COUNT(*) FROM Product);
    
47] WITH RankedEmployees AS ( SELECT project_id, employee_id, experience_years, RANK() OVER (PARTITION BY project_id 
    ORDER BY experience_years DESC) AS rnk FROM Project JOIN Employee ON Project.employee_id = Employee.employee_id)
    SELECT project_id,employee_id,experience_years FROM RankedEmployees WHERE rnk = 1;
    
48] SELECT DISTINCT b.book_id,b.name FROM Books b JOIN Orders o ON b.book_id = o.book_id WHERE 
    o.dispatch_date >= DATEADD(YEAR, -1, '2019-06-23') AND o.dispatch_date <= '2019-06-23' AND DATEDIFF(
    MONTH, b.available_from, '2019-06-23') >= 1 GROUP BY b.book_id,b.name HAVING SUM(o.quantity) < 10;

49] WITH RankedGrades AS (SELECT student_id, course_id, grade, ROW_NUMBER() OVER (PARTITION BY student_id ORDER BY 
    grade DESC, course_id ASC) AS rank FROM Enrollments) SELECT student_id, course_id,grade FROM RankedGrades WHERE
    rank = 1 ORDER BY student_id;
    
50] WITH TeamPoints AS ( SELECT team_id, SUM(CASE WHEN team_id = host_team THEN host_goals ELSE guest_goals END) AS total_goals,
    ROW_NUMBER() OVER (PARTITION BY host_team ORDER BY SUM(CASE WHEN team_id = host_team THEN host_goals ELSE guest_goals END) 
    DESC,MIN(team_id)) AS rank FROM Matches GROUP BY host_team UNION ALL SELECT team_id, SUM(CASE WHEN team_id = guest_team 
    THEN guest_goals ELSE host_goals END) AS total_goals,ROW_NUMBER() OVER (PARTITION BY guest_team ORDER BY 
    SUM(CASE WHEN team_id = guest_team THEN guest_goals ELSE host_goals END) DESC, MIN(team_id)) AS rank FROM Matches
    GROUP BY guest_team) 
    SELECT team_id,total_goals FROM TeamPoints WHERE rank = 1;

